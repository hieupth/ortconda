context:
  name: libonnxruntime
  version: ${{env.get("BUILD_ORT_VERSION")}}
  openvino: ${{env.get("BUILD_ORT_OPENVINO")}}
  openvino_hardware: ${{env.get("BUILD_ORT_OPENVINO_HARDWARE")}}
  cuda: ${{env.get("BUILD_ORT_CUDA")}}
  cuda_version: ${{env.get("BUILD_ORT_CUDA_VERSION")}}
  disable_types: ${{env.get("BUILD_ORT_DISABLE_TYPES")}}

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/microsoft/onnxruntime/archive/refs/tags/v${{version}}.tar.gz
  md5: c1e2861cdd75ee91ea294dbf84675963

build:
  script: |
    build_args="
    --config Release \
    --build_shared_lib --update --build --skip_tests --build_wheel --parallel \
    --compile_no_warning_as_error --skip_submodule_sync --skip_tests \
    --cmake_extra_defines \
      CMAKE_OSX_ARCHITECTURES=$ARCH \
      CMAKE_INSTALL_PREFIX=$PREFIX \
      CMAKE_CUDA_ARCHITECTURES=${{cuda_arch}}
    "
    if [ "${{openvino}}" == "true" ]; then 
      build_args="$build_args --use_openvino ${{openvino_hardware}}"; 
    fi;
    if [ "${{cuda}}" == "true" ]; then
      export CPATH=${CONDA_PREFIX}/include:${CPATH}
      export LD_LIBRARY_PATH=${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH}
      build_args="$build_args --use_cuda --cuda_version ${{cuda_version}}"
      build_args="$build_args --cuda_home=${CONDA_PREFIX} --cudnn_home=${CONDA_PREFIX} --disable_types=${{disable_types}}" 
    fi;
    if [ ${{win}} ]; then
      ./build.bat $build_args
      cd build/Windows/Release && make -j$CPU_COUNT && make install && pip install dist/*
    elif [ ${{osx}} ]; then
      ./build.sh $build_args
      cd build/MacOS/Release && make -j$CPU_COUNT && make install && pip install dist/*
    elif [ ${{linux}} ]; then
      ./build.sh $build_args
      cd build/Linux/Release && make -j$CPU_COUNT && make install && pip install dist/*
    fi;

requirements:
  build:
    - pip
    - wheel
    - setuptools
    - zlib
    - cmake
    - numpy
    - gtest
    - patchelf
    - packaging
    - libabseil
    - libprotobuf<4
    - flatbuffers~=23.5
    - if: linux
      then:
        - sysroot_${{build_platform}}>=2.14
    - if: openvino == true
      then:
        openvino
    - if: cuda == true
      then:
        - gcc=10
        - gxx=10
        - psutil
        - cudnn
        - cuda-nvcc~=${{cuda_version}}
        - cuda-cudart~=${{cuda_version}}
        - libcublas-dev~=${{cuda_version}}
        - cuda-libraries-dev~=${{cuda_version}}
  run:
    - cmake